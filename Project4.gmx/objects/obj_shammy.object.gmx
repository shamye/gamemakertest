<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shammydown_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_shammymask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd=2;
xspd=0;
yspd=0;
xmoment=0;
ymoment=0;
dir=6;
combo=0;
combotimer=0;
cooldown=0;
dashcooldown=0;
dashing=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=y*-1;

if not instance_exists(obj_camerafollow) then {instance_create(x,y,obj_camerafollow);}
if not instance_exists(obj_bubble) then {instance_create(x,y,obj_bubble);}
if not instance_exists(obj_cursor) then {instance_create(x,y,obj_cursor);}

if combotimer=0 {
    if combo!=0 {
        cooldown=20;
        combo=0;
    } else {
        combo=0;
    }
} else {
    combotimer-=1;
}

if cooldown&gt;0 {
    cooldown-=1;
}
if dashcooldown&gt;0 {
    dashcooldown-=1;
}

xspd = (keyboard_check(ord("D"))-keyboard_check(ord("A"))) *spd;
yspd = (keyboard_check(ord("S"))-keyboard_check(ord("W"))) *spd;

//0,1,2,3,4,5,6,7

if yspd&gt;0 {
    if xspd&gt;0 {
        dir=7
    } else if xspd&lt;0 {
        dir=5
    } else {
        dir=6;
    }
} else if yspd&lt;0 {
    if xspd&gt;0 {
        dir=1
    } else if xspd&lt;0 {
        dir=3
    } else {
        dir=2;
    }
} else if xspd&gt;0 {
    dir=0;
} else if xspd&lt;0 {
    dir=4;
}

if yspd!=0 or xspd!=0 {
    switch(dir) {
        case 0: sprite_index=spr_shammyright_run; break;
        case 1: sprite_index=spr_shammyur_run; break;
        case 2: sprite_index=spr_shammyup_run; break;
        case 3: sprite_index=spr_shammyul_run; break;
        case 4: sprite_index=spr_shammyleft_run; break;
        case 5: sprite_index=spr_shammydl_run; break;
        case 6: sprite_index=spr_shammydown_run; break;
        case 7: sprite_index=spr_shammydr_run; break;
    }
    image_speed=0.25;
} else {
    switch(dir) {
        case 0: sprite_index=spr_shammyright_idle; break;
        case 1: sprite_index=spr_shammyur_idle; break;
        case 2: sprite_index=spr_shammyup_idle; break;
        case 3: sprite_index=spr_shammyul_idle; break;
        case 4: sprite_index=spr_shammyleft_idle; break;
        case 5: sprite_index=spr_shammydl_idle; break;
        case 6: sprite_index=spr_shammydown_idle; break;
        case 7: sprite_index=spr_shammydr_idle; break;
    }
    image_speed=0.01;
}


//attacking
if keyboard_check_pressed(vk_space) {
    if combo&lt;3 &amp;&amp; cooldown&lt;=0 &amp;&amp; ((combotimer=0 &amp;&amp; combo=0) || (combotimer&gt;0 &amp;&amp; combo&gt;0)) { //if able to slash (either not incooldown, combo has not started, or combo has started but not been failed.)
        if combo=0 || combo=2 { //first hit
            instance_create(x,y,obj_slash1);
        } else if combo=1 { //second hit
            instance_create(x,y,obj_slash2);
        }
        combo+=1
        switch(dir) { //attack momentum
            case 0: 
                xmoment=6;
            break;
            case 1: 
                xmoment=4;
                ymomeny=-4;
            break;
            case 2: 
                ymoment=-6;
            break;
            case 3: 
                xmoment=-4;
                ymoment=-4;
            break;
            case 4: 
                xmoment=-6;
            break;
            case 5: 
                xmoment=-4;
                ymoment=4;
            break;
            case 6: 
                ymoment=6;
            break;
            case 7: 
                xmoment=4;
                ymoment=4;
            break;
        }
        inst=instance_create(x,y,obj_afterimage)
        inst.sprite_index=sprite_index;
        inst.image_index=image_index;
        inst.image_blend=c_dkgray;
        combotimer=30; //time allowed to continue combo
    }
}

if keyboard_check_pressed(vk_shift) &amp;&amp; dashcooldown&lt;=0 {
    switch(dir) { //dash momentum
        case 0: 
            xmoment=15;
        break;
        case 1: 
            xmoment=10;
            ymomeny=-10;
        break;
        case 2: 
            ymoment=-15;
        break;
        case 3: 
            xmoment=-10;
            ymoment=-10;
        break;
        case 4: 
            xmoment=-15;
        break;
        case 5: 
            xmoment=-10;
            ymoment=10;
        break;
        case 6: 
            ymoment=16;
        break;
        case 7: 
            xmoment=10;
            ymoment=10;
        break;
    }
    dashing=true;
    dashcooldown=120;
}

if dashing=true {
    inst=instance_create(x,y,obj_afterimage)
    inst.sprite_index=sprite_index;
    inst.image_index=image_index;
    inst.image_blend=c_black;
    inst.image_yscale=0.99;
}

if not collision_rectangle(x-8+xspd,y-16,x+8+xspd,y,obj_block,true,true) {
    x+=xspd;
}

if not collision_rectangle(x-8,y-16+yspd,x+8,y+yspd,obj_block,true,true) {
    y+=yspd;
}

if xmoment!=0 {
    if !collision_rectangle(x-8+xmoment,y-16,x+8+xmoment,y,obj_block,true,true) {
        x+=xmoment;
        xmoment=lerp(xmoment,0,0.2);
    } else {
        xmoment=0;
    }
}

if ymoment!=0 {
    if !collision_rectangle(x-8,y-16+ymoment,x+8,y+ymoment,obj_block,true,true) {
        y+=ymoment;
        ymoment=lerp(ymoment,0,0.2);
    } else {
        ymoment=0;
    }
}

if abs(xmoment)&lt;=6 &amp;&amp; abs(ymoment)&lt;=6 {
    dashing=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_shadow,0,x,y);
draw_self();

draw_text(view_xview+16,view_yview+16,obj_bubble.spin);
draw_text(view_xview+16,view_yview+32,obj_bubble.spinning);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
